schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type Query {
  search(term: String!): [SearchResult!]!
  coursesRep("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): CoursesRepConnection
  offsetCoursesRep(skip: Int take: Int): OffsetCoursesRepCollectionSegment
  coursesPagination("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CourseTypeFilterInput order: [CourseTypeSortInput!]): CoursesPaginationConnection
  courses("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CourseTypeFilterInput order: [CourseTypeSortInput!]): CoursesConnection
  testInstructions: String! @deprecated(reason: "This query is deprecated.")
  instructors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: InstructorTypeFilterInput order: [InstructorTypeSortInput!]): InstructorsConnection
  instructorById(id: UUID!): InstructorType!
  courseById(id: UUID!): CourseType!
}

type Mutation {
  updateCourse(input: CourseResultInput! id: UUID! courseInput: CourseTypeInput!): CourseResult!
  createCourse(courseInput: CourseTypeInput!): CourseResult!
  deleteCourse(id: UUID!): Boolean!
  createInstructor(instructorInput: InstructorTypeInput!): InstructorResult!
}

type Subscription {
  courseCreated: CourseResult!
  courseUpdated(courseId: UUID!): CourseResult!
  instructorCreated: InstructorResult!
}

type CourseType {
  instructor: InstructorType!
  creator: UserType!
  id: UUID!
  name: String!
  subject: Subject!
  instructorId: UUID!
  students: [StudentType!]!
  creatorId: String!
}

type InstructorType {
  id: UUID!
  firstName: String!
  lastName: String!
  salary: Float!
}

input CourseTypeFilterInput {
  and: [CourseTypeFilterInput!]
  or: [CourseTypeFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  subject: SubjectOperationFilterInput
  instructorId: UuidOperationFilterInput
  creatorId: StringOperationFilterInput
}

input CourseTypeSortInput {
  name: SortEnumType
  subject: SortEnumType
  creatorId: SortEnumType
}

"A connection to a list of items."
type CoursesRepConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CoursesRepEdge!]
  "A flattened list of the nodes."
  nodes: [CourseType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"A segment of a collection."
type OffsetCoursesRepCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [CourseType!]
  totalCount: Int!
}

"A connection to a list of items."
type CoursesPaginationConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CoursesPaginationEdge!]
  "A flattened list of the nodes."
  nodes: [CourseType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

input InstructorTypeFilterInput {
  and: [InstructorTypeFilterInput!]
  or: [InstructorTypeFilterInput!]
  id: UuidOperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  salary: FloatOperationFilterInput
}

input InstructorTypeSortInput {
  id: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  salary: SortEnumType
}

"A connection to a list of items."
type InstructorsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InstructorsEdge!]
  "A flattened list of the nodes."
  nodes: [InstructorType!]
}

"A connection to a list of items."
type CoursesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CoursesEdge!]
  "A flattened list of the nodes."
  nodes: [CourseType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input SubjectOperationFilterInput {
  eq: Subject
  neq: Subject
  in: [Subject!]
  nin: [Subject!]
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type CoursesRepEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CourseType!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"An edge in a connection."
type CoursesPaginationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CourseType!
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

"An edge in a connection."
type InstructorsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InstructorType!
}

"An edge in a connection."
type CoursesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CourseType!
}

scalar UUID

type UserType {
  id: String!
  username: String!
  photoUrl: String!
}

input InstructorTypeInput {
  firstName: String!
  lastName: String!
  salary: Float!
}

type InstructorResult {
  id: UUID!
  firstName: String!
  lastName: String!
  salary: Float!
}

input CourseTypeInput {
  name: String!
  subject: Subject!
  instructorId: UUID!
}

input CourseResultInput {
  id: UUID!
  name: String!
  subject: Subject!
  instructorId: UUID!
}

type CourseResult {
  id: UUID!
  name: String!
  subject: Subject!
  instructorId: UUID!
}

union SearchResult = CourseType | InstructorType

enum Subject {
  MATHEMATICS
  SCIENCE
  HISTORY
}

type StudentType {
  id: UUID!
  firstName: String!
  lastName: String!
  gpa: Float!
}